{"version":3,"sources":["Toolbar.js","Editor.js","Preview.js","App.js","index.js"],"names":["Toolbar","props","className","title","text","icon","onClick","Editor","id","onChange","type","value","markdown","marked","setOptions","breaks","highlight","code","prismjs","languages","javascript","Preview","dangerouslySetInnerHTML","__html","parse","App","useState","editorMaximized","previewMaximized","state","setState","updateText","file","then","prevState","useEffect","fetch","classes","e","target","files","rootElement","document","getElementById","createRoot","render"],"mappings":"8LAUeA,EAVC,SAACC,GACf,OACE,sBAAKC,UAAU,UAAf,UACE,mBAAGA,UAAU,uBAAuBC,MAAM,sBACzCF,EAAMG,KACP,mBAAGF,UAAWD,EAAMI,KAAMC,QAASL,EAAMK,cCMhCC,EAXA,SAACN,GACd,OACE,0BACEO,GAAG,SACHC,SAAUR,EAAMQ,SAChBC,KAAK,OACLC,MAAOV,EAAMW,Y,cCFnBC,SAAOC,WAAW,CAChBC,QAAQ,EACRC,UAAW,SAAUC,GACnB,OAAOC,UAAQF,UAAUC,EAAMC,UAAQC,UAAUC,WAAY,iBAIjE,IAWeC,EAXC,SAACpB,GACf,OACE,qBACEqB,wBAAyB,CACvBC,OAAQV,SAAOW,MAAMvB,EAAMW,WAE7BJ,GAAG,aCoEMiB,G,MA/EH,WACV,MAA0BC,mBAAS,CACjCd,SAAU,GACVe,iBAAiB,EACjBC,kBAAkB,IAHpB,mBAAOC,EAAP,KAAcC,EAAd,KAwBMC,EAAa,SAACC,GAClBA,EAAK5B,OAAO6B,MAAK,SAAC7B,GAChB0B,GAAS,SAACI,GACR,OAAO,2BACFA,GADL,IAEEtB,SAAUR,WAMlB+B,qBAAU,WACRC,MAAM,aAAaH,MAAK,SAACD,GACvBD,EAAWC,QAEZ,IAEH,IAAMK,EAAUR,EAAMF,gBAClB,CAAC,uBAAwB,mBAAoB,kBAC7CE,EAAMD,iBACN,CAAC,kBAAmB,wBAAyB,kBAC7C,CAAC,aAAc,cAAe,oBAElC,OACE,8BACE,gCACE,sBAAK1B,UAAWmC,EAAQ,GAAxB,UACE,uBACE3B,KAAK,OACLD,SAAU,SAAC6B,GACTP,EAAWO,EAAEC,OAAOC,MAAM,OAG9B,cAAC,EAAD,CACEnC,KAAMgC,EAAQ,GACd/B,QA/CmB,WAC3BwB,EAAS,CACPH,iBAAkBE,EAAMF,mBA8ClBvB,KAAK,WAEP,cAAC,EAAD,CAAQQ,SAAUiB,EAAMjB,SAAUH,SAxDrB,SAAC6B,GACpBR,EAAS,CACPlB,SAAU0B,EAAEC,OAAO5B,cAwDjB,qBAAKT,UAAU,cACf,sBAAKA,UAAWmC,EAAQ,GAAxB,UACE,cAAC,EAAD,CACEhC,KAAMgC,EAAQ,GACd/B,QAlDoB,WAC5BwB,EAAS,CACPF,kBAAmBC,EAAMD,oBAiDnBxB,KAAK,cAEP,cAAC,EAAD,CAASQ,SAAUiB,EAAMjB,qBCxE7B6B,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAD,UACE,cAAC,EAAD,S","file":"static/js/main.ac816be3.chunk.js","sourcesContent":["const Toolbar = (props) => {\n  return (\n    <div className=\"toolbar\">\n      <i className=\"fa fa-free-code-camp\" title=\"no-stack-dub-sack\" />\n      {props.text}\n      <i className={props.icon} onClick={props.onClick} />\n    </div>\n  );\n};\n\nexport default Toolbar;\n","const Editor = (props) => {\n  return (\n    <textarea\n      id=\"editor\"\n      onChange={props.onChange}\n      type=\"text\"\n      value={props.markdown}\n    />\n  );\n};\n\nexport default Editor;\n","import { marked } from \"marked\";\n// import marked from 'markedjs'\nimport { prismjs } from \"prismjs\";\n\nmarked.setOptions({\n  breaks: true,\n  highlight: function (code) {\n    return prismjs.highlight(code, prismjs.languages.javascript, \"javascript\");\n  }\n});\n\nconst Preview = (props) => {\n  return (\n    <div\n      dangerouslySetInnerHTML={{\n        __html: marked.parse(props.markdown)\n      }}\n      id=\"preview\"\n    />\n  );\n};\n\nexport default Preview;\n","import { useState, useEffect } from \"react\";\nimport Toolbar from \"./Toolbar\";\nimport Editor from \"./Editor\";\nimport Preview from \"./Preview\";\nimport s from \"./styles.scss\";\n\nconst App = () => {\n  const [state, setState] = useState({\n    markdown: \"\",\n    editorMaximized: false,\n    previewMaximized: false\n  });\n\n  const handleChange = (e) => {\n    setState({\n      markdown: e.target.value\n    });\n  };\n\n  const handleEditorMaximize = () => {\n    setState({\n      editorMaximized: !state.editorMaximized\n    });\n  };\n\n  const handlePreviewMaximize = () => {\n    setState({\n      previewMaximized: !state.previewMaximized\n    });\n  };\n\n  const updateText = (file) => {\n    file.text().then((text) => {\n      setState((prevState) => {\n        return {\n          ...prevState,\n          markdown: text\n        };\n      });\n    });\n  };\n\n  useEffect(() => {\n    fetch(\"./some.md\").then((file) => {\n      updateText(file);\n    });\n  }, []);\n\n  const classes = state.editorMaximized\n    ? [\"editorWrap maximized\", \"previewWrap hide\", \"fa fa-compress\"]\n    : state.previewMaximized\n    ? [\"editorWrap hide\", \"previewWrap maximized\", \"fa fa-compress\"]\n    : [\"editorWrap\", \"previewWrap\", \"fa fa-arrows-alt\"];\n\n  return (\n    <div>\n      <div>\n        <div className={classes[0]}>\n          <input\n            type=\"file\"\n            onChange={(e) => {\n              updateText(e.target.files[0]);\n            }}\n          />\n          <Toolbar\n            icon={classes[2]}\n            onClick={handleEditorMaximize}\n            text=\"Editor\"\n          />\n          <Editor markdown={state.markdown} onChange={handleChange} />\n        </div>\n        <div className=\"converter\" />\n        <div className={classes[1]}>\n          <Toolbar\n            icon={classes[2]}\n            onClick={handlePreviewMaximize}\n            text=\"Previewer\"\n          />\n          <Preview markdown={state.markdown} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst projectName = \"markdown-previewer\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}